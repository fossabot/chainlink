// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"
)

// KeyStoreInterface is an autogenerated mock type for the KeyStoreInterface type
type KeyStoreInterface struct {
	mock.Mock
}

// Accounts provides a mock function with given fields:
func (_m *KeyStoreInterface) Accounts() []accounts.Account {
	ret := _m.Called()

	var r0 []accounts.Account
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	return r0
}

// GetAccounts provides a mock function with given fields:
func (_m *KeyStoreInterface) GetAccounts() []accounts.Account {
	ret := _m.Called()

	var r0 []accounts.Account
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	return r0
}

// GetFirstAccount provides a mock function with given fields:
func (_m *KeyStoreInterface) GetFirstAccount() (accounts.Account, error) {
	ret := _m.Called()

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func() accounts.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAccounts provides a mock function with given fields:
func (_m *KeyStoreInterface) HasAccounts() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Import provides a mock function with given fields: keyJSON, passphrase, newPassphrase
func (_m *KeyStoreInterface) Import(keyJSON []byte, passphrase string, newPassphrase string) (accounts.Account, error) {
	ret := _m.Called(keyJSON, passphrase, newPassphrase)

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func([]byte, string, string) accounts.Account); ok {
		r0 = rf(keyJSON, passphrase, newPassphrase)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, string) error); ok {
		r1 = rf(keyJSON, passphrase, newPassphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount provides a mock function with given fields: passphrase
func (_m *KeyStoreInterface) NewAccount(passphrase string) (accounts.Account, error) {
	ret := _m.Called(passphrase)

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func(string) accounts.Account); ok {
		r0 = rf(passphrase)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignHash provides a mock function with given fields: hash
func (_m *KeyStoreInterface) SignHash(hash common.Hash) (models.Signature, error) {
	ret := _m.Called(hash)

	var r0 models.Signature
	if rf, ok := ret.Get(0).(func(common.Hash) models.Signature); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: phrase
func (_m *KeyStoreInterface) Unlock(phrase string) error {
	ret := _m.Called(phrase)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(phrase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wallets provides a mock function with given fields:
func (_m *KeyStoreInterface) Wallets() []accounts.Wallet {
	ret := _m.Called()

	var r0 []accounts.Wallet
	if rf, ok := ret.Get(0).(func() []accounts.Wallet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Wallet)
		}
	}

	return r0
}
